#include <iostream>
#include <stdlib.h>
#include <queue>
#include <time.h>

using namespace std;

class node{
    public:
    node *left, *right;
    int data;
};
class BFS{
    public:
    node * insert(node*, int);
    void bfs(node*);
};

node* insert(node* root, int data){
    if (!root){
        root  =  new node;
        root->left = NULL;
        root->right = NULL;
        root->data = data;
        return root;
    }
    queue<node*> q;
    q.push(root);
    while (!q.empty()){
        node* temp = q.front();
        q.pop();
        if(temp->left==NULL){
            temp->left = new node;
            temp->left->left = NULL;
            temp->left->right = NULL;
            temp->left->data = data;
            return root;

        }
        else{
            q.push(temp->right);
        }
        if(temp->right==NULL){
            temp->right = new node;
            temp->right->left = NULL;
            temp->right->right = NULL;
            temp->right->data = data;
            return root;

        }
        else{
            q.push(temp->right);
        }
    }
    return root;
}

void bfs(node* root){
    queue<node*>q;
    q.push(root);

    int qSize;
    while(!q.empty()){
        qSize = q.size();
        #pragma omp parallel for
        for (int i = 0; i < qSize; i++)
        {
            node* currNode;
            #pragma omp critical
            {
                currNode = q.front();
                q.pop();
                cout<<currNode->data<<" ";
            }
            #pragma omp critical
            {
                if(currNode->left)
                    q.push(currNode->left);
                if(currNode->right)
                    q.push(currNode->right);
            }
        }
        
    }
}

int main(){
    srand(time(NULL));
    int size;
    cout<<"Enter array size: ";
    cin>>size;
    int arr[size];
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand()%100;
    }
    cout<<arr;
    node* root = NULL;
    for (int i = 0; i < size; i++)
    {
        root = insert(root, arr[i]);
    }
    bfs(root);
    return 0;
}
