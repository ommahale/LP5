#include <iostream>
#include<vector>
#include<stack>
#include<omp.h>

using namespace std;

void parallel_bfs(vector<vector<int>>&graph, int source){
    int n = graph.size();
    vector<bool> visited(n, false);
    stack<int> q;

    q.push(source);
    visited[source]=true;
    
    while(!q.empty())
    {
        int u;
        u = q.top();
        q.pop();
        #pragma omp parallel for 
        for (int i = 0; i < graph[u].size(); i++)
        {
            int v = graph[u][i];
            if(!visited[v]){
                #pragma omp critical
                {
                    visited[v]=true;
                    q.push(v);
                }

            }
        }
        #pragma omp single
        {        
            cout<<u<<endl;
        }
        
        
        
    }

}
int main() {
    int n, m;
    cout << "Enter the number of vertices: ";
    cin >> n;

    vector<vector<int>> graph(n);

    cout << "Enter the number of edges: ";
    cin >> m;

    cout << "Enter the edges (u v) one per line:" << endl;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        // Uncomment the following line if the graph is undirected
        // graph[v].push_back(u);
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    parallel_bfs(graph, source);

    return 0;
}
